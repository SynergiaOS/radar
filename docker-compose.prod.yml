version: '3.8'

services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile.prod
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - FLASK_DEBUG=false
      - DATABASE_URL=sqlite:///app/data/realtime_data.db
      - REDIS_URL=redis://redis:6379/0
      - DOMAIN=radar-wig.pl
    env_file:
      - .env.production
    volumes:
      - ./data:/app/data
      - ./logs:/var/log/radar-wig
      - ./charts:/app/charts
      - ./professional_charts:/app/professional_charts
    depends_on:
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: ./gpw-smart-analyzer
      dockerfile: Dockerfile.prod
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://radar-wig.pl/api
      - NEXT_PUBLIC_WS_URL=wss://radar-wig.pl
      - NEXT_PUBLIC_DOMAIN=radar-wig.pl
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  backup:
    image: alpine:latest
    volumes:
      - ./data:/backup/data
      - ./logs:/backup/logs
      - ./charts:/backup/charts
      - ./professional_charts:/backup/professional_charts
    command: >
      sh -c "
        apk add --no-cache sqlite3 &&
        while true; do
          echo 'Creating backup...' &&
          date=$(date +%Y%m%d_%H%M%S) &&
          sqlite3 /backup/data/realtime_data.db '.backup /backup/backup_${date}.db' &&
          tar -czf /backup/full_backup_${date}.tar.gz /backup/data /backup/logs /backup/charts /backup/professional_charts &&
          find /backup -name '*.tar.gz' -mtime +30 -delete &&
          find /backup -name '*.db' -mtime +7 -delete &&
          echo 'Backup completed' &&
          sleep 86400
        done
      "
    restart: unless-stopped

volumes:
  redis_data: